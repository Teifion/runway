<div metal:use-macro="layout">
  <div metal:fill-slot="sidebar_logo">
    Documentation
  </div>
  
  <ol class="breadcrumb" metal:fill-slot="breadcrumbs">
    <li><a href="${request.route_url('/')}">${request.runway_settings.system['name']}</a></li>
    <li><a href="${request.route_url('documentation.home')}">Documentation</a></li>
    <li class="active">Quickly add new documentation</li>
  </ol>
  
  <div metal:fill-slot="content">
    <script type="text/javascript" charset="utf-8">
      $(function() {
        $('#sidebar_documentation').addClass('menu-active');
        $('#sidebar_documentation a').addClass('icon-active');
      });
    </script>
    
    <div class="row first-row"
        tal:define="docs_by_tag documents_by_tag('quick-guide', the_documentation.name)"
        tal:condition="len(docs_by_tag) > 0">
      <div class="col-md-12">
        <h4>Related documents</h4>
        <a href="${request.route_url(w.route)}" tal:repeat="w docs_by_tag" class="btn btn-xs btn-info">${w.title}</a>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-12">
        <h1>Adding a trigger</h1>
        <div class="row">
          <div class="col-md-6">
            <h3>/triggers/dummy_trigger.py</h3>
            <pre>from ....core.triggers import Trigger

import random
import string

class DummyTrigger(Trigger):
    """
    You are required to define the following fields
    
    name -> Machine name of the trigger, I'd suggest the use of a namespace
    group -> Human readable name of the grouping for the trigger
    label -> Human readable name of the trigger
    description -> Human readable description of the trigger, designed to inform
        end users about what the trigger does and when/where it will fire
    documentation -> HTML content explaining how the trigger works, like a description
        but in a lot more detail, it is shown to the users when they click an "info" button
    data -> A sequence of 3 length tuples (name, type, description)
    example_outputs -> A list of example outputs that could be produced by the trigger
        the first example is used in the dev section to provide blank data
    location -> The location of the file itself
    
    Optionally:
    permissions -> A list of permissions required to use this trigger
    example_inputs -> A list of dictionaries showing some possible inputs to the trigger
        the first example is used in the dev section to provide data for running the trigger
    """
    
    name = "triggers_dummy_trigger"
    group = "Triggers"
    label = "Dummy trigger"
    description = "A dummy trigger, can only be fired using the relevant developer page"
    documentation = "A dummy trigger"
    location = __file__
    
    # The data the trigger is expected to produce
    outputs = (
        ("field1", int, "Random number between 0 and 1"),
        ("field2", str, "Random string of 5 characters"),
        ("field3", list, "List of 5 random numbers (between 0 and 1)"),
        ("field4", list, "An empty list"),
    )
    
    permissions = ["developer"]
    
    example_inputs = [{}]
    
    example_outputs = [{
        "field1": 0.456,
        "field2": "abcde",
        "field3": [0.11, 0.22, 0.15, 0.98, 0.33],
        "field4": [],
    },
    {
        "field1": 0.999,
        "field2": "zzzzz",
        "field3": [0.99] * 5,
        "field4": [],
    }]
    
    def __call__(self):
        """
        This dummy trigger expects no arguments. However, it's quite possible you'd want
        to add arguments for various things (e.g. ID of user added).
        """
        
        return {
            "field1": random.random(),
            "field2": "".join([random.choice(string.ascii_lowercase) for i in range(5)]),
            "field3": [random.random() for i in range(5)],
        }</pre>
          </div>
          <div class="col-md-6">
            <h3>/__init__.py</h3>
            <pre>def includeme(config):
    from .triggers import (
        dummy_trigger,
    )</pre>
            <br />
            <h3>/lib/dummy_lib.py</h3>
            <pre>from ....core.triggers import call_trigger

def my_func():
    triggers.call_trigger("dummy_trigger", **kwargs)</pre>
          </div>
        </div>
        
        
        <h1>Adding an action</h1>
        <div class="row">
          <div class="col-md-6">
            <h3>/actions/dummy_action.py</h3>
            <pre>from ....core.triggers import Action

import logging
log = logging.getLogger(__name__)

class DummyAction(Action):
    """
    You are required to define the following fields
    
    name -> Machine name of the trigger, I'd suggest the use of a namespace
    label -> Human readable name of the trigger
    description -> Human readable description of the trigger, designed to inform
        end users about what the trigger does and when/where it will fire
    inputs -> A sequence of 3 length tuples (name, type, description)
        Note: An input named "args" of type list will be treated as a varadic input (*args)
        and the same will apply to "kwargs" of type dict (**kwargs)
    outputs -> A sequence of 3 length tuples (name, type, description), an empty sequence
        indicates no returned values (e.g. an email action)
    examples -> A list of example input to output combinations that could be produced
        by the action, the first example is used in the dev section to provide blank data
    location -> The location of the file itself
    
    Optionally:
    permissions -> A list of permissions required to use this action
    """
    
    name = "triggers_dummy_action"
    group = "Triggers"
    label = "Dummy action"
    description = """A dummy action, it prints a message to the log as DEBUG level.
Additionally it will produce a True boolean and an Integer of value 1."""
    documentation = """A dummy action, it takes stuff and prints it."""
    location = __file__
    
    # The data the trigger is expected to produce
    inputs = (
        ("integer_input", int, "Will be disregarded, exists only for demonstration purposes"),
        ("string_input", str, "Will be disregarded, exists only for demonstration purposes"),
    )
    
    outputs = (
        ("boolean_result", bool, "Will always evaluate to True"),
        ("integer_result", int, "Will always evaluate to 1"),
        ("string_result", int, "Will always evaluate to 1"),
    )
    
    permissions = ["developer"]
    
    examples = [
        (
            dict(integer_input=123, string_input="abc"),
            dict(boolean_result=True, integer_result=1, string_result="DummyAction (TEST MODE) has been called")
        ),(
            dict(integer_input=12*12*12, string_input="zzyyxx"),
            dict(boolean_result=True, integer_result=1, string_result="DummyAction (TEST MODE) has been called")
        ),
    ]
    
    def __call__(self, integer_input, string_input, test_mode=False):
        """
        This dummy action requires an integer and a string input, it will disregarded
        both of them. They exist here only for demonstration purposes.
        
        Normally in an action the results would be dependent on the inputs, in this case
        they are constant purely for demonstration purposes.
        """
        
        if test_mode:
            string_result = "\n\nDummyAction (TEST MODE) has been called successfully with\nint:{}\nstr:{}\n".format(integer_input, string_input)
        else:
            string_result = "\n\nDummyAction has been called successfully with\nint:{}\nstr:{}\n".format(integer_input, string_input)
        
        log.debug(string_result)
        
        return {
            "boolean_result": True,
            "integer_result": 1,
            "string_result": string_result
        }
</pre>
          </div>
          <div class="col-md-6">
            <h3>/__init__.py</h3>
            <pre>def includeme(config):
    from .actions import (
        dummy_action,
    )</pre>
          </div>
        </div>
        
      </div>
    </div>
    
  </div>
</div>
